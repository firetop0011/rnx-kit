"use strict";(self.webpackChunk_rnx_kit_docsite=self.webpackChunk_rnx_kit_docsite||[]).push([[425],{3609:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var o=n(5893),s=n(1151);const i={},r="console",c={id:"tools/console",title:"console",description:"@rnx-kit/console is a simple console logger that is a subset of the logger in",source:"@site/docs/tools/console.md",sourceDirName:"tools",slug:"/tools/console",permalink:"/rnx-kit/docs/tools/console",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/rnx-kit/tree/main/docsite/docs/tools/console.md",tags:[],version:"current",frontMatter:{},sidebar:"toolsSidebar",previous:{title:"config",permalink:"/rnx-kit/docs/tools/config"},next:{title:"esbuild-plugin-import-path-remapper",permalink:"/rnx-kit/docs/tools/esbuild-plugin-import-path-remapper"}},l={},a=[{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"console",children:"console"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"@rnx-kit/console"})," is a simple console logger that is a subset of the logger in\n",(0,o.jsx)(t.a,{href:"https://github.com/react-native-community/cli/blob/6615eb30f37bec5bb25acc066c849c4aa2d8a4cd/packages/tools/src/logger.ts",children:(0,o.jsx)(t.code,{children:"@react-native-community/cli-tools"})}),".\nIt is used by\n",(0,o.jsx)(t.a,{href:"https://github.com/microsoft/rnx-kit/tree/main/packages",children:"Metro plugins"})," to\nensure that log lines are consistent with ",(0,o.jsx)(t.code,{children:"@react-native-community/cli"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Ideally, we should be using the reporter that is passed to Metro but we don't\nhave access to it from the ",(0,o.jsx)(t.code,{children:"customSerializer"})," hook. The next best thing would be\nto use ",(0,o.jsx)(t.code,{children:"@react-native-community/cli-tools"})," but it includes a bunch of other\ntools and we cannot take a dependency on any single version since we need to\nsupport multiple versions of ",(0,o.jsx)(t.code,{children:"react-native"})," (and hence multiple versions of\n",(0,o.jsx)(t.code,{children:"@react-native-community/cli-tools"}),")."]}),"\n",(0,o.jsxs)(t.p,{children:["Other libraries, such as\n",(0,o.jsx)(t.a,{href:"https://github.com/microsoft/just/tree/master/packages/just-task-logger",children:(0,o.jsx)(t.code,{children:"just-task-logger"})}),",\nwere also considered. However, the purpose of this package is to match with the\noutput of ",(0,o.jsx)(t.code,{children:"@react-native-community/cli"}),". ",(0,o.jsx)(t.code,{children:"just-task-logger"})," in particular uses\nits own colour scheme and doesn't allow configuring them to match the colour\nscheme."]}),"\n",(0,o.jsx)(t.h2,{id:"install",children:"Install"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-sh",children:"yarn add @rnx-kit/console --dev\n"})}),"\n",(0,o.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:'import { error, info, warn } from "@rnx-kit/console";\n\nerror("This is an error message");\ninfo("This is an informational message");\nwarn("This is a warning");\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>r});var o=n(7294);const s={},i=o.createContext(s);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);