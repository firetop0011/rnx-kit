"use strict";(self.webpackChunk_rnx_kit_docsite=self.webpackChunk_rnx_kit_docsite||[]).push([[8298],{4171:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(5893),s=n(1151);const i={},o="babel-plugin-import-path-remapper",l={id:"tools/babel-plugin-import-path-remapper",title:"babel-plugin-import-path-remapper",description:"@rnx-kit/babel-plugin-import-path-remapper remaps /lib/ imports to",source:"@site/docs/tools/babel-plugin-import-path-remapper.md",sourceDirName:"tools",slug:"/tools/babel-plugin-import-path-remapper",permalink:"/rnx-kit/docs/tools/babel-plugin-import-path-remapper",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/rnx-kit/tree/main/docsite/docs/tools/babel-plugin-import-path-remapper.md",tags:[],version:"current",frontMatter:{},sidebar:"toolsSidebar",previous:{title:"align-deps",permalink:"/rnx-kit/docs/tools/align-deps"},next:{title:"babel-preset-metro-react-native",permalink:"/rnx-kit/docs/tools/babel-preset-metro-react-native"}},a={},p=[{value:"Usage",id:"usage",level:2},{value:"Options",id:"options",level:3}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"babel-plugin-import-path-remapper",children:"babel-plugin-import-path-remapper"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"@rnx-kit/babel-plugin-import-path-remapper"})," remaps ",(0,r.jsx)(t.code,{children:"**/lib/**"})," imports to\n",(0,r.jsx)(t.code,{children:"**/src/**"}),". This is useful for packages that are not correctly exporting\neverything via their ",(0,r.jsx)(t.code,{children:"index.ts"}),", but you still want to consume the TypeScript\nfiles rather than the transpiled JavaScript."]}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(t.p,{children:["Add ",(0,r.jsx)(t.code,{children:"@rnx-kit/babel-plugin-import-path-remapper"})," to your ",(0,r.jsx)(t.code,{children:"babel.config.js"})," under\nplugins. For example, to remap all paths under the ",(0,r.jsx)(t.code,{children:"@rnx-kit"})," scope:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:'// babel.config.js\nmodule.exports = {\n  presets: ["module:metro-react-native-babel-preset"],\n  overrides: [\n    {\n      test: /\\.tsx?$/,\n      plugins: [\n        // @babel/plugin-transform-typescript doesn\'t support `const enum`s.\n        // See https://babeljs.io/docs/en/babel-plugin-transform-typescript#caveats\n        // for more details.\n        "const-enum",\n\n        [\n          "@rnx-kit/babel-plugin-import-path-remapper",\n          { test: (source) => source.startsWith("@rnx-kit/") },\n        ],\n      ],\n    },\n  ],\n};\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Or, if you're using ",(0,r.jsx)(t.code,{children:"@rnx-kit/metro-config"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:'// babel.config.js\nconst { makeBabelConfig } = require("@rnx-kit/metro-config");\nmodule.exports = makeBabelConfig([\n  [\n    "@rnx-kit/babel-plugin-import-path-remapper",\n    { test: (source) => source.startsWith("@rnx-kit/") },\n  ],\n]);\n'})}),"\n",(0,r.jsx)(t.h3,{id:"options",children:"Options"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Option"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"test"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"(source: string) => boolean"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.strong,{children:"[Required]"})," A function returning whether the passed source should be redirected to another module."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"remap"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"(moduleName: string, path: string) => string"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.strong,{children:"[Optional]"})," A function returning the module that should be used instead, e.g. ",(0,r.jsx)(t.code,{children:"contoso/index.js"})," -> ",(0,r.jsx)(t.code,{children:"contoso/index.ts"}),"."]})]})]})]})]})}function d(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>o});var r=n(7294);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);